#!/bin/bash

# Utilities

function work() {
  if ! tmux attach-session -t work
  then
    tmux new-session -s work
  fi
}

function datetime() {
    date -u +%Y-%m-%dT%H:%M:%SZ
}

function ls_functions()
{
  functions | grep -E "^\w* \(\) \{" | grep -v ^_ | cut -d ' ' -f 1
}

function wgets()
{
  local H='--header'
  wget $H='Accept-Language: en-us,en;q=0.5' $H='Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' $H='Connection: keep-alive' -U       'Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2' --referer=http://www.askapache.com/ "$@";
}

# SSH

function f_ssh_auth() {
  eval `ssh-agent`
  ssh-add
}

# Call this if the above has been blown away
function f_ssh_reagent() {
  for agent in /var/folders/zt/**/T/ssh-*/*; do
      SSH_AUTH_SOCK=$agent
      if ssh-add -l 2>&1 > /dev/null; then
         echo Found working SSH Agent:
         # Persist the socket for conveniance
         ln -fs $SSH_AUTH_SOCK $HOME/.agent_ssh_auth_sock
         ssh-add -l
         return
      fi
  done
  echo Cannot find ssh agent - maybe you should reconnect and forward it? ('f_ssh_auth' should do the trick)
}

function sshn() {
    [ -z $1 ] && { 
        echo "Please provide a session name, aborting."
        return
    }

    local session=$1
    local window=$1
    local command="ssh"

    for host in $(cat -); do
        if [ $rown ]; then
            tmux split-window -h "$command $host"
            tmux select-layout tiled > /dev/null 
        fi
        if [ -z $rown ]; then
            local rown="yes"
            tmux new-session -d -n $window -s $session "$command $host"
        fi
    done
    tmux select-pane -t 0
    tmux set-window-option synchronize-panes on > /dev/null
}

# Git

git-recursive () {
  find . -iname .git -type d -prune -print -execdir git "$@" \;
}

function tagtime() {
  date -u +%Y%m%dT%H%M%SZ
}

function bulk-tag()
{
  while read branch
  do
    git tag "`tagtime`_$branch" $branch
  done
}

# Code

function cd_repo()
{
  cd `ls -d $HOME/code.local/*/* $HOME/github.com/*/* $HOME/code.br.zbi.cba/*/* | grep -i $@`
}

function ls_repos()
{
  ls -d $HOME/code.local/*/* $HOME/github.com/*/* $HOME/code.br.zbi.cba/*/* | grep -i $@
}

# Still not as good as `git grep`
function sanegrep()
{
  case `uname` in
    Darwin)
      grep -iEr --exclude "*.js" --exclude "*.css" --exclude "*spec*" --exclude tags $1 .
      ;;
    Linux)
      grep -iEr --exclude *.js --exclude *.css --exclude *spec* --exclude tags $1 .
      ;;
  esac
}

function kupata()
{
  case `uname` in
    Darwin)
      find -E . -iname $1
      ;;
    Linux)
      find -iname $1
      ;;
  esac
}

function findrex()
{
  case `uname` in
    Darwin)
      find -E . -iregex $1
      ;;
    Linux)
      find -iregex $1
      ;;
  esac
}

function vimo()
{
  vim `kupata $1`
}

function vrex()
{
  vim `findrex $1`
}

function virb()
{
  vrex ".*/$1\.rb$"
}

function visc()
{
  vrex ".*/$1\.scala$"
}

function verb()
{
  vrex ".*/$1\.erb$"
}

# Not to be confused with github.com/LimpidTech/vimpy
function vimpy()
{
  vrex ".*/$1\.py$"
}

# help: parse a yaml file to JSON (helpful for jq usage)
function yaml2json {
  local file=${1}
  cat $file | ruby -ryaml -rjson -e 'puts JSON.dump(YAML.load(STDIN.read))'
}

# Example usage:
# rsync_git here/* there/
function rsync_git {
  rsync -avz --exclude ‘.DS_Store’ $@
}

